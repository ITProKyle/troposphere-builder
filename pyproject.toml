[tool.poetry]
name = "troposphere-builder"
version = "0.0.0"
description = ""
authors = ["Kyle Finley <kyle@finley.sh>"]
license = "Apache-2.0"

[tool.poetry.dependencies]
python = "^3.7"

[tool.poetry.dev-dependencies]
# Format
black = "^20.8b1"
# Lint
isort = "^5.6.4"
pylint = "^2.6.0"
## flake8
flake8 = "^3.8.4"
flake8-docstrings = "^1.5.0"
pep8-naming = "^0.11.1"
pre-commit = "^2.8.2"
pydocstyle = "^5.1.1"
# Test
mock = "^4.0.2"
pytest = "^6.1.2"
pytest-cov = "^2.10.1"
pytest-mock = "^3.3.1"
pytest-sugar = "^0.9.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 88
target-version = ['py38']


[tool.coverage.report]
exclude_lines = [
    "cov: ignore",  # standard exclude comment
    "if TYPE_CHECKING:",  # excluded blocks
    "if __name__ == .__main__.:",
    "raise AssertionError",  # defensive exceptions
    "raise NotImplimentedError",
    "if sys.version_info",
    "@overload",
]


[tool.isort]
profile = "black"
skip = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".runway",
    ".runway_cache",
    ".venv",
    "_build",
    "build",
    "dist",
]


[tool.pylint.basic]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#basic-checker
attr-rgx = "([a-z_][a-z0-9_]{2,30}|VARIABLES)$"
attr-name-hint = "([a-z_][a-z0-9_]{2,30}|VARIABLES)$"
good-names = [
    "_",
    "a",
    "b",
    "ca",
    "ci",
    "db",
    "f",
    "fn",
    "i",
    "id",
    "j",
    "k",
    "ok",
    "s3",
    "ui",
    "up",
    "v",
]

[tool.pylint.classes]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#classes-checker
defining-attr-methods = [
    "__init__",
    "__new__",
    "setUp",
]
exclude-protected=[
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make",
    "_session",  # for boto3.session.Session
    "_prompter",
    "_client_config",  # boto3.client.Client._client_config contains info like region
    "_endpoint",  # boto3.client.Client._endpoint contains s3 endpoint info
]

[tool.pylint.design]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#design-checker-options
max-args = 10
max-attributes = 20
max-bool-expr = 5
max-branches = 20
max-locals = 25
max-parents = 10
max-public-methods = 30
max-returns = 6
max-statements = 50
min-public-methods = 1

[tool.pylint.format]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#format-checker
max-line-length = 100
max-module-lines = 1000

[tool.pylint.imports]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#imports-checker
allow-wildcard-with-all = "no"

[tool.pylint.logging]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#logging-checker
logging-format-style = "old"

[tool.pylint.master]
extension-pkg-whitelist = [
    "pydantic",  # https://github.com/samuelcolvin/pydantic/issues/992#issuecomment-553545180
]
jobs = 0

[tool.pylint.miscellaneous]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#miscellaneous-checker
notes = ["FIXME"]

[tool.pylint.message_control]
# http://pylint.pycqa.org/en/latest/technical_reference/features.html#messages-control-options
disable = [
    "line-too-long",  # flake8 overlap
    "missing-class-docstring",  # flake8 (pydocstyle) overlap
    "missing-function-docstring",  # flake8 (pydocstyle) overlap
    "missing-module-docstring",  # flake8 (pydocstyle) overlap
    "similarities",  # black overcomplicates this
    "ungrouped-imports",  # handled by isort
]

[tool.pylint.reports]
msg-template="{path}:{line}:{column}: {msg_id}: {msg} ({symbol})"
output-format="colorized"
score="yes"


[tool.pytest.ini_options]
addopts = [
    "--color=auto",
    "--code-highlight=yes",
    "--cov-config=pyproject.toml",
    "--no-cov-on-fail",
    "--strict-markers",
]
filterwarnings = ["ignore::DeprecationWarning", "ignore::FutureWarning:"]
minversion = 6.0
mock_use_standalone_module = true
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]
markers = [
    "wip: isolate tests currently being worked on."
]

